// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface dualport_bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface dualport_bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// simple dual port BRAM

interface simple_dualport_bram_port0 {
  output! addr0,
  input   rdata0,
}

interface simple_dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

//IEEE 754




bitfield float{
    uint1 sign,
    uint8 exponant,
    uint23 fraction,
}


algorithm uint_to_float(input uint32 u, output uint32 f){
    uint1 s :=0;
    uint8 exponant = 0;
    uint23 mantissa = 0;
        if(u[31,1]){
            exponant = {1b1, 7d31} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 8);
            __display("padding : %d", 0);
            mantissa = u[8,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[30,1]){
            exponant = {1b1, 7d30} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 7);
            __display("padding : %d", 0);
            mantissa = u[7,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[29,1]){
            exponant = {1b1, 7d29} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 6);
            __display("padding : %d", 0);
            mantissa = u[6,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[28,1]){
            exponant = {1b1, 7d28} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 5);
            __display("padding : %d", 0);
            mantissa = u[5,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[27,1]){
            exponant = {1b1, 7d27} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 4);
            __display("padding : %d", 0);
            mantissa = u[4,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[26,1]){
            exponant = {1b1, 7d26} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 3);
            __display("padding : %d", 0);
            mantissa = u[3,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[25,1]){
            exponant = {1b1, 7d25} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 2);
            __display("padding : %d", 0);
            mantissa = u[2,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[24,1]){
            exponant = {1b1, 7d24} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 1);
            __display("padding : %d", 0);
            mantissa = u[1,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[23,1]){
            exponant = {1b1, 7d23} -1;
            __display("u : %b", u);
            __display("size : %d", 23);
            __display("start : %d", 0);
            __display("padding : %d", 0);
            mantissa = u[0,23];
            __display("mantissa %b", mantissa);
        } else {
        if(u[22,1]){
            exponant = {1b1, 7d22} -1;
            __display("u : %b", u);
            __display("size : %d", 22);
            __display("start : %d", 0);
            __display("padding : %d", 1);
            mantissa = {u[0,22], 1d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[21,1]){
            exponant = {1b1, 7d21} -1;
            __display("u : %b", u);
            __display("size : %d", 21);
            __display("start : %d", 0);
            __display("padding : %d", 2);
            mantissa = {u[0,21], 2d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[20,1]){
            exponant = {1b1, 7d20} -1;
            __display("u : %b", u);
            __display("size : %d", 20);
            __display("start : %d", 0);
            __display("padding : %d", 3);
            mantissa = {u[0,20], 3d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[19,1]){
            exponant = {1b1, 7d19} -1;
            __display("u : %b", u);
            __display("size : %d", 19);
            __display("start : %d", 0);
            __display("padding : %d", 4);
            mantissa = {u[0,19], 4d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[18,1]){
            exponant = {1b1, 7d18} -1;
            __display("u : %b", u);
            __display("size : %d", 18);
            __display("start : %d", 0);
            __display("padding : %d", 5);
            mantissa = {u[0,18], 5d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[17,1]){
            exponant = {1b1, 7d17} -1;
            __display("u : %b", u);
            __display("size : %d", 17);
            __display("start : %d", 0);
            __display("padding : %d", 6);
            mantissa = {u[0,17], 6d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[16,1]){
            exponant = {1b1, 7d16} -1;
            __display("u : %b", u);
            __display("size : %d", 16);
            __display("start : %d", 0);
            __display("padding : %d", 7);
            mantissa = {u[0,16], 7d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[15,1]){
            exponant = {1b1, 7d15} -1;
            __display("u : %b", u);
            __display("size : %d", 15);
            __display("start : %d", 0);
            __display("padding : %d", 8);
            mantissa = {u[0,15], 8d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[14,1]){
            exponant = {1b1, 7d14} -1;
            __display("u : %b", u);
            __display("size : %d", 14);
            __display("start : %d", 0);
            __display("padding : %d", 9);
            mantissa = {u[0,14], 9d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[13,1]){
            exponant = {1b1, 7d13} -1;
            __display("u : %b", u);
            __display("size : %d", 13);
            __display("start : %d", 0);
            __display("padding : %d", 10);
            mantissa = {u[0,13], 10d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[12,1]){
            exponant = {1b1, 7d12} -1;
            __display("u : %b", u);
            __display("size : %d", 12);
            __display("start : %d", 0);
            __display("padding : %d", 11);
            mantissa = {u[0,12], 11d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[11,1]){
            exponant = {1b1, 7d11} -1;
            __display("u : %b", u);
            __display("size : %d", 11);
            __display("start : %d", 0);
            __display("padding : %d", 12);
            mantissa = {u[0,11], 12d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[10,1]){
            exponant = {1b1, 7d10} -1;
            __display("u : %b", u);
            __display("size : %d", 10);
            __display("start : %d", 0);
            __display("padding : %d", 13);
            mantissa = {u[0,10], 13d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[9,1]){
            exponant = {1b1, 7d9} -1;
            __display("u : %b", u);
            __display("size : %d", 9);
            __display("start : %d", 0);
            __display("padding : %d", 14);
            mantissa = {u[0,9], 14d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[8,1]){
            exponant = {1b1, 7d8} -1;
            __display("u : %b", u);
            __display("size : %d", 8);
            __display("start : %d", 0);
            __display("padding : %d", 15);
            mantissa = {u[0,8], 15d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[7,1]){
            exponant = {1b1, 7d7} -1;
            __display("u : %b", u);
            __display("size : %d", 7);
            __display("start : %d", 0);
            __display("padding : %d", 16);
            mantissa = {u[0,7], 16d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[6,1]){
            exponant = {1b1, 7d6} -1;
            __display("u : %b", u);
            __display("size : %d", 6);
            __display("start : %d", 0);
            __display("padding : %d", 17);
            mantissa = {u[0,6], 17d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[5,1]){
            exponant = {1b1, 7d5} -1;
            __display("u : %b", u);
            __display("size : %d", 5);
            __display("start : %d", 0);
            __display("padding : %d", 18);
            mantissa = {u[0,5], 18d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[4,1]){
            exponant = {1b1, 7d4} -1;
            __display("u : %b", u);
            __display("size : %d", 4);
            __display("start : %d", 0);
            __display("padding : %d", 19);
            mantissa = {u[0,4], 19d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[3,1]){
            exponant = {1b1, 7d3} -1;
            __display("u : %b", u);
            __display("size : %d", 3);
            __display("start : %d", 0);
            __display("padding : %d", 20);
            mantissa = {u[0,3], 20d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[2,1]){
            exponant = {1b1, 7d2} -1;
            __display("u : %b", u);
            __display("size : %d", 2);
            __display("start : %d", 0);
            __display("padding : %d", 21);
            mantissa = {u[0,2], 21d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[1,1]){
            exponant = {1b1, 7d1} -1;
            __display("u : %b", u);
            __display("size : %d", 1);
            __display("start : %d", 0);
            __display("padding : %d", 22);
            mantissa = {u[0,1], 22d0};
            __display("mantissa %b", mantissa);
        } else {
        if(u[0,1]){
            exponant = {1b1, 7d0} -1;
            mantissa = 0;
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
    f = {s, exponant, mantissa};
}


//equivalent to a ceil
algorithm float_to_uint(input uint32 f, output uint32 u){
    uint8 one_exponent := {1b1,7b0};
    uint8 exponant := f[23, 8] + 1;
    u = 0;

    if(f[31, 1] ){
        u = 0;
    }
    else{
        if(exponant[7, 1]){
            if(exponant == one_exponent){
                u =1;
            }else{
                if(31 == exponant[0,7]){
                    u = (1 << 31) +  f[0, 23];
                }else{
                if(30 == exponant[0,7]){
                    u = (1 << 30) +  f[0, 23];
                }else{
                if(29 == exponant[0,7]){
                    u = (1 << 29) +  f[0, 23];
                }else{
                if(28 == exponant[0,7]){
                    u = (1 << 28) +  f[0, 23];
                }else{
                if(27 == exponant[0,7]){
                    u = (1 << 27) +  f[0, 23];
                }else{
                if(26 == exponant[0,7]){
                    u = (1 << 26) +  f[0, 23];
                }else{
                if(25 == exponant[0,7]){
                    u = (1 << 25) +  f[0, 23];
                }else{
                if(24 == exponant[0,7]){
                    u = (1 << 24) +  f[0, 23];
                }else{
                if(23 == exponant[0,7]){
                    u = (1 << 23) +  f[0, 23];
                }else{
                if(22 == exponant[0,7]){
                    u = (1 << 22) +  f[1, 22];
                }else{
                if(21 == exponant[0,7]){
                    u = (1 << 21) +  f[2, 21];
                }else{
                if(20 == exponant[0,7]){
                    u = (1 << 20) +  f[3, 20];
                }else{
                if(19 == exponant[0,7]){
                    u = (1 << 19) +  f[4, 19];
                }else{
                if(18 == exponant[0,7]){
                    u = (1 << 18) +  f[5, 18];
                }else{
                if(17 == exponant[0,7]){
                    u = (1 << 17) +  f[6, 17];
                }else{
                if(16 == exponant[0,7]){
                    u = (1 << 16) +  f[7, 16];
                }else{
                if(15 == exponant[0,7]){
                    u = (1 << 15) +  f[8, 15];
                }else{
                if(14 == exponant[0,7]){
                    u = (1 << 14) +  f[9, 14];
                }else{
                if(13 == exponant[0,7]){
                    u = (1 << 13) +  f[10, 13];
                }else{
                if(12 == exponant[0,7]){
                    u = (1 << 12) +  f[11, 12];
                }else{
                if(11 == exponant[0,7]){
                    u = (1 << 11) +  f[12, 11];
                }else{
                if(10 == exponant[0,7]){
                    u = (1 << 10) +  f[13, 10];
                }else{
                if(9 == exponant[0,7]){
                    u = (1 << 9) +  f[14, 9];
                }else{
                if(8 == exponant[0,7]){
                    u = (1 << 8) +  f[15, 8];
                }else{
                if(7 == exponant[0,7]){
                    u = (1 << 7) +  f[16, 7];
                }else{
                if(6 == exponant[0,7]){
                    u = (1 << 6) +  f[17, 6];
                }else{
                if(5 == exponant[0,7]){
                    u = (1 << 5) +  f[18, 5];
                }else{
                if(4 == exponant[0,7]){
                    u = (1 << 4) +  f[19, 4];
                }else{
                if(3 == exponant[0,7]){
                    u = (1 << 3) +  f[20, 3];
                }else{
                if(2 == exponant[0,7]){
                    u = (1 << 2) +  f[21, 2];
                }else{
                if(1 == exponant[0,7]){
                    u = (1 << 1) +  f[22, 1];
                }else{
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
            }
        }
    }
}



algorithm inf_float(input uint32 f1, input uint32 f2, output uint1 inf){
    inf = 0;
    if(f1[31, 1] & ~f2[31, 1]){
        inf = 1;
    }else{
        if(f1[23, 8] < f2[23, 8]){
            inf = 1;
        }
    }
}

algorithm sup_float(input uint32 f1, input uint32 f2, output uint1 inf){
    inf = 0;
    if(~f1[31, 1] & f2[31, 1]){
        inf = 1;
    }else{
        if(f1[23, 8] > f2[23, 8]){
            inf = 1;
        }
    }
}


algorithm mul_float(
    input uint32 f1,
    input uint32 f2, 
    output uint32 res)
{
    uint8 e1          := f1[23, 8];
    uint8 e2          := f2[23, 8];
    uint24 m1       := {1b1, f1[0, 23]};
    uint24 m2       := {1b1, f2[0, 23]};
    uint8 one_inv     := {1b1, 7b0};
    uint8 bias        := ~{1b1, 7b0};
    uint1 r_s                       := f1[31,1] == f2[31,1] ? f2[31,1] : -1;
    uint23 r_m(0);
    uint8 r_e(0);
    

    //mantissa multiplication
    uint48 tmp(0);
    uint48 r_0 := m2[0,1] ? m1 : 0;
        uint48 r_1 := m2[1,1] ? {m1,1b0} : 0;
        uint48 r_2 := m2[2,1] ? {m1,2b0} : 0;
        uint48 r_3 := m2[3,1] ? {m1,3b0} : 0;
        uint48 r_4 := m2[4,1] ? {m1,4b0} : 0;
        uint48 r_5 := m2[5,1] ? {m1,5b0} : 0;
        uint48 r_6 := m2[6,1] ? {m1,6b0} : 0;
        uint48 r_7 := m2[7,1] ? {m1,7b0} : 0;
        uint48 r_8 := m2[8,1] ? {m1,8b0} : 0;
        uint48 r_9 := m2[9,1] ? {m1,9b0} : 0;
        uint48 r_10 := m2[10,1] ? {m1,10b0} : 0;
        uint48 r_11 := m2[11,1] ? {m1,11b0} : 0;
        uint48 r_12 := m2[12,1] ? {m1,12b0} : 0;
        uint48 r_13 := m2[13,1] ? {m1,13b0} : 0;
        uint48 r_14 := m2[14,1] ? {m1,14b0} : 0;
        uint48 r_15 := m2[15,1] ? {m1,15b0} : 0;
        uint48 r_16 := m2[16,1] ? {m1,16b0} : 0;
        uint48 r_17 := m2[17,1] ? {m1,17b0} : 0;
        uint48 r_18 := m2[18,1] ? {m1,18b0} : 0;
        uint48 r_19 := m2[19,1] ? {m1,19b0} : 0;
        uint48 r_20 := m2[20,1] ? {m1,20b0} : 0;
        uint48 r_21 := m2[21,1] ? {m1,21b0} : 0;
        uint48 r_22 := m2[22,1] ? {m1,22b0} : 0;
        uint48 r_23 := m2[23,1] ? {m1,23b0} : 0;
//    __display("m1 : %b", m1);
//    __display("m2 : %b", m2);
    tmp = 
        r_0+
        r_1+
        r_2+
        r_3+
        r_4+
        r_5+
        r_6+
        r_7+
        r_8+
        r_9+
        r_10+
        r_11+
        r_12+
        r_13+
        r_14+
        r_15+
        r_16+
        r_17+
        r_18+
        r_19+
        r_20+
        r_21+
        r_22+
        r_23;

//    __display("tmp : %b", tmp);
    
    r_m = tmp[47,1] ? tmp[24, 23] : tmp[23, 23];

    //TODO fix for neg exponent
    if((e1[7,1] && e2[7,1]) | ~e1 == one_inv | ~e2 == one_inv){
        r_e = tmp[47,1] ? e1  + (e2[0,7]+ 1) +1 : e1  + (e2[0,7]+ 1);
    }
    else{
        if(e1[7,1] && ~e2[7,1]){
            r_e = tmp[47,1] ? e1 - (bias-e2) +1:  e1 - (bias-e2) ;
        }
        else{
            if(~e1[7,1] && e2[7,1]){
                r_e = tmp[47,1] ? e2 - (bias-e1) +1 :  e2 - (bias-e1);
            }
            else{ /*~e1[7] && ~e2[7]*/                
                r_e =  tmp[47,1] ? e2+e1 - bias +1 : e2+e1 - bias;
            }
        }
    }
    
    res = {r_s,r_e,r_m};
}



algorithm main(output uint8 leds){
    uint_to_float to_float;
    float_to_uint to_uint;
    uint32 u1(128);
    uint32 u2(127);

    uint32 u3(0);
    inf_float inf;
    mul_float mul;
    uint32 f1 = uninitialized;
    uint32 f2 = uninitialized;
    uint32 f3 = uninitialized;
    uint32 one = 32b00111111100000000000000000000000;
    uint1 b = uninitialized;

    
    f1 = 32b00111110101101101000000101100111;
    f2 = 32b01000010111111100000000000000000;
    ++:
    (f2)<-to_float<-(u2);
    ++:
    (f3)<-mul<-(f1,f2);
    ++:
    (u3)<-to_uint<-(f2);
    /*__display(" %d                  = %b %b %b", u1, f1[31,1], f1[23,8], f1[0,23]);
    __display(" 0.875                       = %b %b %b", f2[31,1], f2[23,8], f2[0,23]);
    __display(" %d * 0.875          = %b %b %b", u1,f3[31,1], f3[23,8], f3[0,23]);*/
    __display("	%d                 = %d",u2, u3);
    
}
