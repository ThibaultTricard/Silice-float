// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface dualport_bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface dualport_bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// simple dual port BRAM

interface simple_dualport_bram_port0 {
  output! addr0,
  input   rdata0,
}

interface simple_dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

//IEEE 754



bitfield float{
    uint1 sign,
    uint8 exponant,
    uint23 fraction,
}


algorithm uint32_to_float(input uint32 i, output uint32 f){
    uint1 s :=0;
    uint8 exponant = 0;
    uint23 mantissa = 0;
        if(i[31,1]){
            exponant = {1b1, 7d31} -1;
            mantissa = {i[0,31], -8d0};
        } else {
        if(i[30,1]){
            exponant = {1b1, 7d30} -1;
            mantissa = {i[0,30], -7d0};
        } else {
        if(i[29,1]){
            exponant = {1b1, 7d29} -1;
            mantissa = {i[0,29], -6d0};
        } else {
        if(i[28,1]){
            exponant = {1b1, 7d28} -1;
            mantissa = {i[0,28], -5d0};
        } else {
        if(i[27,1]){
            exponant = {1b1, 7d27} -1;
            mantissa = {i[0,27], -4d0};
        } else {
        if(i[26,1]){
            exponant = {1b1, 7d26} -1;
            mantissa = {i[0,26], -3d0};
        } else {
        if(i[25,1]){
            exponant = {1b1, 7d25} -1;
            mantissa = {i[0,25], -2d0};
        } else {
        if(i[24,1]){
            exponant = {1b1, 7d24} -1;
            mantissa = {i[0,24], -1d0};
        } else {
        if(i[23,1]){
            exponant = {1b1, 7d23} -1;
            mantissa = {i[0,23], 0d0};
        } else {
        if(i[22,1]){
            exponant = {1b1, 7d22} -1;
            mantissa = {i[0,22], 1d0};
        } else {
        if(i[21,1]){
            exponant = {1b1, 7d21} -1;
            mantissa = {i[0,21], 2d0};
        } else {
        if(i[20,1]){
            exponant = {1b1, 7d20} -1;
            mantissa = {i[0,20], 3d0};
        } else {
        if(i[19,1]){
            exponant = {1b1, 7d19} -1;
            mantissa = {i[0,19], 4d0};
        } else {
        if(i[18,1]){
            exponant = {1b1, 7d18} -1;
            mantissa = {i[0,18], 5d0};
        } else {
        if(i[17,1]){
            exponant = {1b1, 7d17} -1;
            mantissa = {i[0,17], 6d0};
        } else {
        if(i[16,1]){
            exponant = {1b1, 7d16} -1;
            mantissa = {i[0,16], 7d0};
        } else {
        if(i[15,1]){
            exponant = {1b1, 7d15} -1;
            mantissa = {i[0,15], 8d0};
        } else {
        if(i[14,1]){
            exponant = {1b1, 7d14} -1;
            mantissa = {i[0,14], 9d0};
        } else {
        if(i[13,1]){
            exponant = {1b1, 7d13} -1;
            mantissa = {i[0,13], 10d0};
        } else {
        if(i[12,1]){
            exponant = {1b1, 7d12} -1;
            mantissa = {i[0,12], 11d0};
        } else {
        if(i[11,1]){
            exponant = {1b1, 7d11} -1;
            mantissa = {i[0,11], 12d0};
        } else {
        if(i[10,1]){
            exponant = {1b1, 7d10} -1;
            mantissa = {i[0,10], 13d0};
        } else {
        if(i[9,1]){
            exponant = {1b1, 7d9} -1;
            mantissa = {i[0,9], 14d0};
        } else {
        if(i[8,1]){
            exponant = {1b1, 7d8} -1;
            mantissa = {i[0,8], 15d0};
        } else {
        if(i[7,1]){
            exponant = {1b1, 7d7} -1;
            mantissa = {i[0,7], 16d0};
        } else {
        if(i[6,1]){
            exponant = {1b1, 7d6} -1;
            mantissa = {i[0,6], 17d0};
        } else {
        if(i[5,1]){
            exponant = {1b1, 7d5} -1;
            mantissa = {i[0,5], 18d0};
        } else {
        if(i[4,1]){
            exponant = {1b1, 7d4} -1;
            mantissa = {i[0,4], 19d0};
        } else {
        if(i[3,1]){
            exponant = {1b1, 7d3} -1;
            mantissa = {i[0,3], 20d0};
        } else {
        if(i[2,1]){
            exponant = {1b1, 7d2} -1;
            mantissa = {i[0,2], 21d0};
        } else {
        if(i[1,1]){
            exponant = {1b1, 7d1} -1;
            mantissa = {i[0,1], 22d0};
        } else {
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
    f = {s, exponant, mantissa};
}


//equivalent to a ceil
algorithm float_to_uint32(input uint32 f, output uint32 i){
    if(f[31, 1]){
        i = 0;
    }
    else{
        uint8 exponant = 0;
        exponant = f[23, 7] + 1;
            if(31 == exponant){
                i = (1 << exponant) +  f[-8, 31];
            }
            if(30 == exponant){
                i = (1 << exponant) +  f[-7, 30];
            }
            if(29 == exponant){
                i = (1 << exponant) +  f[-6, 29];
            }
            if(28 == exponant){
                i = (1 << exponant) +  f[-5, 28];
            }
            if(27 == exponant){
                i = (1 << exponant) +  f[-4, 27];
            }
            if(26 == exponant){
                i = (1 << exponant) +  f[-3, 26];
            }
            if(25 == exponant){
                i = (1 << exponant) +  f[-2, 25];
            }
            if(24 == exponant){
                i = (1 << exponant) +  f[-1, 24];
            }
            if(23 == exponant){
                i = (1 << exponant) +  f[0, 23];
            }
            if(22 == exponant){
                i = (1 << exponant) +  f[1, 22];
            }
            if(21 == exponant){
                i = (1 << exponant) +  f[2, 21];
            }
            if(20 == exponant){
                i = (1 << exponant) +  f[3, 20];
            }
            if(19 == exponant){
                i = (1 << exponant) +  f[4, 19];
            }
            if(18 == exponant){
                i = (1 << exponant) +  f[5, 18];
            }
            if(17 == exponant){
                i = (1 << exponant) +  f[6, 17];
            }
            if(16 == exponant){
                i = (1 << exponant) +  f[7, 16];
            }
            if(15 == exponant){
                i = (1 << exponant) +  f[8, 15];
            }
            if(14 == exponant){
                i = (1 << exponant) +  f[9, 14];
            }
            if(13 == exponant){
                i = (1 << exponant) +  f[10, 13];
            }
            if(12 == exponant){
                i = (1 << exponant) +  f[11, 12];
            }
            if(11 == exponant){
                i = (1 << exponant) +  f[12, 11];
            }
            if(10 == exponant){
                i = (1 << exponant) +  f[13, 10];
            }
            if(9 == exponant){
                i = (1 << exponant) +  f[14, 9];
            }
            if(8 == exponant){
                i = (1 << exponant) +  f[15, 8];
            }
            if(7 == exponant){
                i = (1 << exponant) +  f[16, 7];
            }
            if(6 == exponant){
                i = (1 << exponant) +  f[17, 6];
            }
            if(5 == exponant){
                i = (1 << exponant) +  f[18, 5];
            }
            if(4 == exponant){
                i = (1 << exponant) +  f[19, 4];
            }
            if(3 == exponant){
                i = (1 << exponant) +  f[20, 3];
            }
            if(2 == exponant){
                i = (1 << exponant) +  f[21, 2];
            }
            if(1 == exponant){
                i = (1 << exponant) +  f[22, 1];
            }
    }
}

algorithm inf_float(input uint32 f1, input uint32 f2, output uint1 inf){
    inf = 0;
    if(f1[31, 1] & ~f2[31, 1]){
        inf = 1;
    }else{
        if(f1[23, 8] < f2[23, 8]){
            inf = 1;
        }
    }
}

algorithm sup_float(input uint32 f1, input uint32 f2, output uint1 inf){
    inf = 0;
    if(~f1[31, 1] & f2[31, 1]){
        inf = 1;
    }else{
        if(f1[23, 8] > f2[23, 8]){
            inf = 1;
        }
    }
}


algorithm main(output uint8 leds){
    uint32_to_float to_float;
    float_to_uint32 conv_prime;
    inf_float inf;
    sup_float sup;
    uint32 f1 = uninitialized;
    uint32 f2 = uninitialized;
    uint1 b = uninitialized;
    (f1)<-to_float<-(129);
    (f2)<-to_float<-(680);

    (b)<-sup<-(f2,f1);
    
    if(b){
        __display("success");
    }
    else{
        __display("failled");
    }
    
}
